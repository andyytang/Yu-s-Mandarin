/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Encoder;

import java.awt.Color;
import static java.awt.Color.black;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;
import javax.swing.UnsupportedLookAndFeelException;


/**
 *
 * @author andyyt2
 */
public class Jonathan_BlockEncode extends javax.swing.JFrame {

    /**
     * Creates new form Jonathan_Encode
     */
    public Jonathan_BlockEncode() {
        initComponents();
    }
    public static boolean isConsonant(char c){
        String cons = "bcdfghjklmnpqrstvwxyzBCDFGHJKLMNPQRSTVWXYZ";
        return cons.contains("" + c);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);
        setMinimumSize(new java.awt.Dimension(231, 155));
        setResizable(false);

        jTextField1.setBackground(new java.awt.Color(50, 50, 50));
        jTextField1.setForeground(new java.awt.Color(255, 255, 255));
        jTextField1.setText("Input");

        jTextArea1.setBackground(new java.awt.Color(50, 50, 50));
        jTextArea1.setColumns(20);
        jTextArea1.setFont(new java.awt.Font("Tahoma", 0, 11)); // NOI18N
        jTextArea1.setForeground(new java.awt.Color(255, 255, 255));
        jTextArea1.setRows(3);
        jTextArea1.setText("Output");
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton1.setForeground(new java.awt.Color(255, 255, 255));
        jButton1.setText("Encrypt");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jButton2.setForeground(new java.awt.Color(255, 255, 255));
        jButton2.setText("Decrypt");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextField2.setBackground(new java.awt.Color(50, 50, 50));
        jTextField2.setFont(new java.awt.Font("Tahoma", 0, 10)); // NOI18N
        jTextField2.setForeground(new java.awt.Color(255, 255, 255));
        jTextField2.setText("Key");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE))
                    .addComponent(jTextField1))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jTextField2)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(0, 11, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        int k = Integer.parseInt(jTextField2.getText());
        String trueplaintext = jTextField1.getText();
        for(int j = 0; j < k; j++){
            String plaintext = jTextField1.getText().replaceAll("[^a-zA-Z]", "").toLowerCase();
            String key = "mine";
            StringBuilder ciphertext = new StringBuilder("");
            int consonants = 0;
            boolean rot13 = false;
            for(int i = 0; i < plaintext.length(); i++){
                if(consonants == 6){
                    consonants = 0;
                    rot13 = !rot13;
                }
                char c = plaintext.charAt(i);
                if(isConsonant(c)){
                    consonants++;
                }
                if(rot13){
                    //Implement rot13
                    if       (c >= 'a' && c <= 'm') c += 13;
                    else if  (c >= 'A' && c <= 'M') c += 13;
                    else if  (c >= 'n' && c <= 'z') c -= 13;
                    else if  (c >= 'N' && c <= 'Z') c -= 13;
                }
                else{
                    c += (key.charAt(i%4) - 'a');
                    if(c > 122){
                        c -= 26;
                    }
                }
                ciphertext.append(c);
            }
            for(int i = 0; i < ciphertext.length(); i++){
                if(ciphertext.charAt(i) == 'm'){
                    ciphertext.insert(i + 1, 'e');
                }
            }
            jTextField1.setText(ciphertext.toString());
        }
        jTextArea1.setText(jTextField1.getText());
        jTextField1.setText(trueplaintext);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int k = Integer.parseInt(jTextField2.getText());
        String trueciphertext = jTextField1.getText();
        for(int j = 0; j < k; j++){
            StringBuilder ciphertext = new StringBuilder(jTextField1.getText().replaceAll("[^a-zA-Z]", "").toLowerCase());
            String plaintext = "";
            for(int i = 0; i < ciphertext.length() - 1; i++){
                if(ciphertext.charAt(i) == 'm' && ciphertext.charAt(i + 1) == 'e'){
                    ciphertext.deleteCharAt(i + 1);
                    //To make it look pretty
                    ciphertext.insert(i, "");
                }
            }
            String cphr2 = ciphertext.toString();
            String key = "mine";
            int consonants = 0;
            boolean rot13 = false;
            for(int i = 0; i < cphr2.length(); i++){
                if(consonants == 6){
                    consonants = 0;
                    rot13 = !rot13;
                }
                char c = cphr2.charAt(i);
                if(rot13){
                    //Implement rot13
                    if       (c >= 'a' && c <= 'm') c += 13;
                    else if  (c >= 'A' && c <= 'M') c += 13;
                    else if  (c >= 'n' && c <= 'z') c -= 13;
                    else if  (c >= 'N' && c <= 'Z') c -= 13;
                }
                else{
                    c -= (key.charAt(i%4) - 'a');
                    if(c < 97){
                        c += 26;
                    }
                }
                if(isConsonant(c)){
                    consonants++;
                }
                plaintext += c;
            }
            jTextField1.setText(plaintext);
        }
        jTextArea1.setText(jTextField1.getText());
        jTextField1.setText(trueciphertext);
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        UIManager.put("nimbusBase", new Color(0,0,50));
        UIManager.put("nimbusBlueGrey", new Color(25,25,25));
        UIManager.put("control", new Color(250,250,250));

        for (LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
            if ("Nimbus".equals(info.getName())) {
                try {
                    UIManager.setLookAndFeel(info.getClassName());
                } catch (ClassNotFoundException ex) {
                    Logger.getLogger(Jonathan_BlockEncode.class.getName()).log(Level.SEVERE, null, ex);
                } catch (InstantiationException ex) {
                    Logger.getLogger(Jonathan_BlockEncode.class.getName()).log(Level.SEVERE, null, ex);
                } catch (IllegalAccessException ex) {
                    Logger.getLogger(Jonathan_BlockEncode.class.getName()).log(Level.SEVERE, null, ex);
                } catch (UnsupportedLookAndFeelException ex) {
                    Logger.getLogger(Jonathan_BlockEncode.class.getName()).log(Level.SEVERE, null, ex);
                }
                break;
            }
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Jonathan_BlockEncode().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
